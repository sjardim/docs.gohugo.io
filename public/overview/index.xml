<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overview on Hugo: A Fast and Flexible Website Generator</title>
    <link>http://localhost:1313/overview/</link>
    <description>Recent content in Overview on Hugo: A Fast and Flexible Website Generator</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 01 Jul 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/overview/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introduction to Hugo</title>
      <link>http://localhost:1313/overview/introduction/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/overview/introduction/</guid>
      <description>

&lt;h2 id=&#34;what-is-hugo:2767292a573dc549b9b4297b701af3ab&#34;&gt;What is Hugo?&lt;/h2&gt;

&lt;p&gt;Hugo is a general-purpose website framework. Technically speaking, Hugo is
a static site generator. This means that, unlike systems like WordPress,
Ghost and Drupal, which run on your web server expensively building a page
every time a visitor requests one, Hugo does the building when you create
your content. Since websites are viewed far more often than they are
edited, Hugo is optimized for website viewing while providing a great
writing experience.&lt;/p&gt;

&lt;p&gt;Sites built with Hugo are extremely fast and very secure. Hugo sites can
be hosted anywhere, including &lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt;, &lt;a href=&#34;https://www.godaddy.com/&#34;&gt;GoDaddy&lt;/a&gt;, &lt;a href=&#34;http://www.dreamhost.com/&#34;&gt;DreamHost&lt;/a&gt;,
&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;, &lt;a href=&#34;http://cloud.google.com/storage/&#34;&gt;Google Cloud Storage&lt;/a&gt;, &lt;a href=&#34;http://aws.amazon.com/s3/&#34;&gt;Amazon S3&lt;/a&gt; and &lt;a href=&#34;http://aws.amazon.com/cloudfront/&#34; title=&#34;Amazon CloudFront&#34;&gt;CloudFront&lt;/a&gt;, and work well with CDNs.
Hugo sites run without dependencies on expensive runtimes like Ruby,
Python or PHP and without dependencies on any databases.&lt;/p&gt;

&lt;p&gt;We think of Hugo as the ideal website creation tool. With nearly instant
build times and the ability to rebuild whenever a change is made, Hugo
provides a very fast feedback loop. This is essential when you are
designing websites, but also very useful when creating content.&lt;/p&gt;

&lt;h2 id=&#34;what-makes-hugo-different:2767292a573dc549b9b4297b701af3ab&#34;&gt;What makes Hugo different?&lt;/h2&gt;

&lt;p&gt;Web site generators render content into HTML files. Most are &amp;ldquo;dynamic
site generators.&amp;rdquo; That means the HTTP
server (which is the program running on your website that the user&amp;rsquo;s
browser talks to) runs the generator to create a new HTML file
each and every time a user wants to view a page.&lt;/p&gt;

&lt;p&gt;Creating the page dynamically means that the computer hosting
the HTTP server has to have enough memory and CPU to effectively run
the generator around the clock. If not, then the user has to wait
in a queue for the page to be generated.&lt;/p&gt;

&lt;p&gt;Nobody wants users to wait longer than needed, so the dynamic site
generators programmed their systems to cache the HTML files. When
a file is cached, a copy of it is temporarily stored on the computer.
It is much faster for the HTTP server to send that copy the next time
the page is requested than it is to generate it from scratch.&lt;/p&gt;

&lt;p&gt;Hugo takes caching a step further. All HTML files are rendered on your
computer. You can review the files before you copy them to the computer
hosting the HTTP server. Since the HTML files aren&amp;rsquo;t generated dynamically,
we say that Hugo is a &amp;ldquo;static site generator.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Not running a web site generator on your HTTP server has many benefits.
The most noticeable is performance - HTTP servers are very good at
sending files. So good that you can effectively serve the same number
of pages with a fraction of the memory and CPU needed for a dynamic site.&lt;/p&gt;

&lt;p&gt;Hugo has two components to help you build and test your web site. The
one that you&amp;rsquo;ll probably use most often is the built-in HTTP server.
When you run &lt;code&gt;hugo server&lt;/code&gt;, Hugo renders all of your content into
HTML files and then runs a HTTP server on your computer so that you
can see what the pages look like.&lt;/p&gt;

&lt;p&gt;The second component is used when you&amp;rsquo;re ready to publish your web
site to the computer running your website. Running Hugo without any
actions will rebuild your entire web site using the &lt;code&gt;baseurl&lt;/code&gt; setting
from your site&amp;rsquo;s configuration file. That&amp;rsquo;s required to have your page
links work properly with most hosting companies.&lt;/p&gt;

&lt;h2 id=&#34;how-fast-is-hugo:2767292a573dc549b9b4297b701af3ab&#34;&gt;How fast is Hugo?&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;video-container&#34;&gt;
&lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;100%&#34; height=&#34;auto&#34; src=&#34;https://www.youtube.com/embed/CdiDYZ51a2o&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;what-does-hugo-do:2767292a573dc549b9b4297b701af3ab&#34;&gt;What does Hugo do?&lt;/h2&gt;

&lt;p&gt;In technical terms, Hugo takes a source directory of files and
templates and uses these as input to create a complete website.&lt;/p&gt;

&lt;p&gt;Hugo boasts the following features:&lt;/p&gt;

&lt;h3 id=&#34;general:2767292a573dc549b9b4297b701af3ab&#34;&gt;General&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extremely fast build times (~1&amp;nbsp;ms per page)&lt;/li&gt;
&lt;li&gt;Completely cross platform: Runs on &lt;i class=&#34;fa fa-apple&#34;&gt;&lt;/i&gt;&amp;nbsp;Mac OS&amp;nbsp;X, &lt;i class=&#34;fa fa-linux&#34;&gt;&lt;/i&gt;&amp;nbsp;Linux, &lt;i class=&#34;fa fa-windows&#34;&gt;&lt;/i&gt;&amp;nbsp;Windows, and more!&lt;/li&gt;
&lt;li&gt;Easy &lt;a href=&#34;http://localhost:1313/overview/installing/&#34;&gt;installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Render changes &lt;a href=&#34;http://localhost:1313/overview/usage/&#34;&gt;on the fly&lt;/a&gt; with &lt;a href=&#34;http://localhost:1313/extras/livereload/&#34;&gt;LiveReload&lt;/a&gt; as you develop&lt;/li&gt;
&lt;li&gt;Complete theme support&lt;/li&gt;
&lt;li&gt;Host your site anywhere&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;organization:2767292a573dc549b9b4297b701af3ab&#34;&gt;Organization&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Straightforward &lt;a href=&#34;http://localhost:1313/content/organization/&#34;&gt;organization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support for &lt;a href=&#34;http://localhost:1313/content/sections/&#34;&gt;website sections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Completely customizable &lt;a href=&#34;http://localhost:1313/extras/urls/&#34;&gt;URLs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support for configurable &lt;a href=&#34;http://localhost:1313/taxonomies/overview/&#34;&gt;taxonomies&lt;/a&gt; which includes categories and tags.  Create your own custom organization of content&lt;/li&gt;
&lt;li&gt;Ability to &lt;a href=&#34;http://localhost:1313/content/ordering/&#34;&gt;sort content&lt;/a&gt; as you desire&lt;/li&gt;
&lt;li&gt;Automatic &lt;a href=&#34;http://localhost:1313/extras/toc/&#34;&gt;table of contents&lt;/a&gt; generation&lt;/li&gt;
&lt;li&gt;Dynamic menu creation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/extras/urls/&#34;&gt;Pretty URLs&lt;/a&gt; support&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/extras/permalinks/&#34;&gt;Permalink&lt;/a&gt; pattern support&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/extras/aliases/&#34;&gt;Aliases&lt;/a&gt; (redirects)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;content:2767292a573dc549b9b4297b701af3ab&#34;&gt;Content&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Native support for content written in &lt;a href=&#34;http://localhost:1313/content/example/&#34;&gt;Markdown&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Support for other languages through &lt;em&gt;external helpers&lt;/em&gt;, see &lt;a href=&#34;http://localhost:1313/content/supported-formats&#34;&gt;supported formats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Support for TOML, YAML and JSON metadata in &lt;a href=&#34;http://localhost:1313/content/front-matter/&#34;&gt;frontmatter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Completely &lt;a href=&#34;http://localhost:1313/layout/homepage/&#34;&gt;customizable homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support for multiple &lt;a href=&#34;http://localhost:1313/content/types/&#34;&gt;content types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Automatic and user defined &lt;a href=&#34;http://localhost:1313/content/summaries/&#34;&gt;summaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/extras/shortcodes/&#34;&gt;Shortcodes&lt;/a&gt; to enable rich content inside of Markdown&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/layout/variables/&#34;&gt;&amp;ldquo;Minutes to Read&amp;rdquo;&lt;/a&gt; functionality&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/layout/variables/&#34;&gt;&amp;ldquo;Wordcount&amp;rdquo;&lt;/a&gt; functionality&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;additional-features:2767292a573dc549b9b4297b701af3ab&#34;&gt;Additional Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Integrated &lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt; comment support&lt;/li&gt;
&lt;li&gt;Integrated &lt;a href=&#34;https://google-analytics.com/&#34;&gt;Google Analytics&lt;/a&gt; support&lt;/li&gt;
&lt;li&gt;Automatic &lt;a href=&#34;http://localhost:1313/layout/rss/&#34;&gt;RSS&lt;/a&gt; creation&lt;/li&gt;
&lt;li&gt;Support for &lt;a href=&#34;http://golang.org/pkg/html/template/&#34;&gt;Go&lt;/a&gt;, &lt;a href=&#34;https://github.com/eknkc/amber&#34;&gt;Amber&lt;/a&gt; and &lt;a href=&#34;http://ace.yoss.si/&#34;&gt;Ace&lt;/a&gt; HTML templates&lt;/li&gt;
&lt;li&gt;Syntax &lt;a href=&#34;http://localhost:1313/extras/highlighting/&#34;&gt;highlighting&lt;/a&gt; powered by &lt;a href=&#34;http://pygments.org/&#34;&gt;Pygments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See what&amp;rsquo;s coming next in the &lt;a href=&#34;http://localhost:1313/meta/roadmap/&#34;&gt;roadmap&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;who-should-use-hugo:2767292a573dc549b9b4297b701af3ab&#34;&gt;Who should use Hugo?&lt;/h2&gt;

&lt;p&gt;Hugo is for people that prefer writing in a text editor over
a browser.&lt;/p&gt;

&lt;p&gt;Hugo is for people who want to hand code their own website without
worrying about setting up complicated runtimes, dependencies and
databases.&lt;/p&gt;

&lt;p&gt;Hugo is for people building a blog, company site, portfolio, tumblog,
documentation, single page site or a site with thousands of
pages.&lt;/p&gt;

&lt;h2 id=&#34;why-did-you-write-hugo:2767292a573dc549b9b4297b701af3ab&#34;&gt;Why did you write Hugo?&lt;/h2&gt;

&lt;p&gt;I wrote Hugo ultimately for a few reasons. First, I was disappointed with
WordPress, my then website solution. It rendered slowly. I couldn&amp;rsquo;t create
content as efficiently as I wanted to and needed to be online to write
posts. The constant security updates and the horror stories of people&amp;rsquo;s
hacked blogs. I hated how content was written in HTML instead of the much
simpler Markdown. Overall, I felt like it got in my way more than it helped
me from writing great content.&lt;/p&gt;

&lt;p&gt;I looked at existing static site generators like &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;, &lt;a href=&#34;https://middlemanapp.com/&#34;&gt;Middleman&lt;/a&gt; and &lt;a href=&#34;http://nanoc.ws/&#34;&gt;nanoc&lt;/a&gt;.
All had complicated dependencies to install and took far longer to render
my blog with hundreds of posts than I felt was acceptable. I wanted
a framework to be able to get rapid feedback while making changes to the
templates, and the 5+-minute render times was just too slow. In general,
they were also very blog minded and didn&amp;rsquo;t have the ability to have
different content types and flexible URLs.&lt;/p&gt;

&lt;p&gt;I wanted to develop a fast and full-featured website framework without
dependencies. The &lt;a href=&#34;http://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go language&lt;/a&gt; seemed to have all of the features I needed
in a language. I began developing Hugo in Go and fell in love with the
language. I hope you will enjoy using (and contributing to) Hugo as much
as I have writing it.&lt;/p&gt;

&lt;h2 id=&#34;next-steps:2767292a573dc549b9b4297b701af3ab&#34;&gt;Next Steps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/overview/installing/&#34;&gt;Install Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/overview/quickstart/&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/community/mailing-list/&#34;&gt;Join the Mailing List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/hugo&#34;&gt;Star us on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://discuss.gohugo.io/&#34;&gt;Discussion Forum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Quickstart Guide</title>
      <link>http://localhost:1313/overview/quickstart/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/overview/quickstart/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: This quickstart depends on features introduced in Hugo v0.11.  If you have an earlier version of Hugo, you will need to &lt;a href=&#34;http://localhost:1313/overview/installing/&#34;&gt;upgrade&lt;/a&gt; before proceeding.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;div class=&#34;video-container&#34;&gt;
&lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;100%&#34; height=&#34;auto&#34; src=&#34;https://www.youtube.com/embed/w7Ft2ymGmfc&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;step-1-install-hugo:09c84f91027bd18b03251c05a0da4abb&#34;&gt;Step 1. Install Hugo&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo Releases&lt;/a&gt; and download the
appropriate version for your OS and architecture.&lt;/p&gt;

&lt;p&gt;Save the main executable as &lt;code&gt;hugo&lt;/code&gt; (or &lt;code&gt;hugo.exe&lt;/code&gt; on Windows) somewhere in your &lt;code&gt;PATH&lt;/code&gt; as we will be using it in the next step.&lt;/p&gt;

&lt;p&gt;More complete instructions are available at &lt;a href=&#34;http://localhost:1313/overview/installing/&#34;&gt;Installing Hugo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;step-2-have-hugo-create-a-site-for-you:09c84f91027bd18b03251c05a0da4abb&#34;&gt;Step 2. Have Hugo Create a site for you&lt;/h2&gt;

&lt;p&gt;Hugo has the ability to create a skeleton site:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site /path/to/site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the rest of the operations, we will be executing all commands from within the site directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /path/to/site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The new site will have the following structure&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ▸ archetypes/
  ▸ content/
  ▸ layouts/
  ▸ static/
    config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Currently the site doesn’t have any content, nor is it configured.&lt;/p&gt;

&lt;h2 id=&#34;step-3-create-some-content:09c84f91027bd18b03251c05a0da4abb&#34;&gt;Step 3. Create Some Content&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;If you used a different blogging platform such as Jekyll, Ghost or Wordpress and you
want convert your content, take a look at this list of &lt;a href=&#34;http://localhost:1313/tools/#migration-tools:d680e8a854a7cbad6d490c445cba2eba&#34;&gt; migration tools&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hugo also has the ability to create a skeleton content page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A new file is now created in &lt;code&gt;content/&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2015-01-08T08:36:54-07:00&amp;quot;
draft = true
title = &amp;quot;about&amp;quot;

+++

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the date is automatically set to the moment you created the content.&lt;/p&gt;

&lt;p&gt;Place some content in Markdown format below the &lt;code&gt;+++&lt;/code&gt; in this file.
For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;## A headline

Some Content
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For fun, let’s create another piece of content and place some Markdown in it as well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/first.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The new file is located at &lt;code&gt;content/post/first.md&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We still lack any templates to tell us how to display the content.&lt;/p&gt;

&lt;h2 id=&#34;step-4-install-some-themes:09c84f91027bd18b03251c05a0da4abb&#34;&gt;Step 4. Install some themes&lt;/h2&gt;

&lt;p&gt;Hugo has rich theme support and a growing set of themes to choose from.
To install all of the available Hugo themes, simply clone the entire &lt;strong&gt;hugoThemes&lt;/strong&gt; repository from within your working directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone --recursive https://github.com/spf13/hugoThemes themes
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-5-run-hugo:09c84f91027bd18b03251c05a0da4abb&#34;&gt;Step 5. Run Hugo&lt;/h2&gt;

&lt;p&gt;Hugo contains its own high-performance web server. Simply run &lt;code&gt;hugo
server&lt;/code&gt; and Hugo will find an available port and run a server with
your content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server --theme=hyde --buildDrafts
2 pages created
0 tags created
0 categories created
in 5 ms
Serving pages from exampleHugoSite/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We specified two options here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--theme&lt;/code&gt; to pick which theme;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--buildDrafts&lt;/code&gt; because we want to display our content, both set to draft status.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn about what other options hugo has, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To learn about the server options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo help server
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-6-edit-content:09c84f91027bd18b03251c05a0da4abb&#34;&gt;Step 6. Edit Content&lt;/h2&gt;

&lt;p&gt;Not only can Hugo run a server, but it can also watch your files for
changes and automatically rebuild your site. Hugo will then
communicate with your browser and automatically reload any open page.
This even works in mobile browsers.&lt;/p&gt;

&lt;p&gt;Stop the Hugo process by hitting &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt;. Then run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server --theme=hyde --buildDrafts --watch
2 pages created
0 tags created
0 categories created
in 5 ms
Watching for changes in exampleHugoSite/content
Serving pages from exampleHugoSite/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open your &lt;a href=&#34;http://vim.spf13.com/&#34;&gt;favorite editor&lt;/a&gt;, edit and save your content, and watch as Hugo rebuilds and reloads automatically.&lt;/p&gt;

&lt;p&gt;It’s especially productive to leave a browser open on a second monitor
and just glance at it whenever you save. You don’t even need to tab to
your browser. Hugo is so fast that the new site will be there before
you can look at the browser in most cases.&lt;/p&gt;

&lt;p&gt;Change and save this file. Notice what happened in your terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Change detected, rebuilding site

2 pages created
0 tags created
0 categories created
in 5 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-7-have-fun:09c84f91027bd18b03251c05a0da4abb&#34;&gt;Step 7. Have fun&lt;/h2&gt;

&lt;p&gt;The best way to learn something is to play with it.&lt;/p&gt;

&lt;p&gt;Things to try:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a &lt;a href=&#34;http://localhost:1313/content/organization/&#34;&gt;new content file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a &lt;a href=&#34;http://localhost:1313/content/sections/&#34;&gt;new section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Modify &lt;a href=&#34;http://localhost:1313/layout/templates/&#34;&gt;a template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create content with &lt;a href=&#34;http://localhost:1313/content/front-matter/&#34;&gt;TOML front matter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Define your own field in &lt;a href=&#34;http://localhost:1313/content/front-matter/&#34;&gt;front matter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Display that &lt;a href=&#34;http://localhost:1313/layout/variables/&#34;&gt;field in the template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a &lt;a href=&#34;http://localhost:1313/content/types/&#34;&gt;new content type&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Installing Hugo</title>
      <link>http://localhost:1313/overview/installing/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/overview/installing/</guid>
      <description>

&lt;p&gt;Hugo is written in &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt; with support for multiple platforms.&lt;/p&gt;

&lt;p&gt;The latest release can be found at &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo Releases&lt;/a&gt;.
We currently provide pre-built binaries for
&lt;i class=&#34;fa fa-windows&#34;&gt;&lt;/i&gt;&amp;nbsp;Windows,
&lt;i class=&#34;fa fa-linux&#34;&gt;&lt;/i&gt;&amp;nbsp;Linux,
&lt;i class=&#34;fa freebsd-19px&#34;&gt;&lt;/i&gt;&amp;nbsp;FreeBSD
and &lt;i class=&#34;fa fa-apple&#34;&gt;&lt;/i&gt;&amp;nbsp;OS&amp;nbsp;X (Darwin)
for x64, i386 and ARM architectures.&lt;/p&gt;

&lt;p&gt;Hugo may also be compiled from source wherever the Go compiler tool chain can run, e.g. for other operating systems including DragonFly BSD, OpenBSD, Plan&amp;nbsp;9 and Solaris.  See &lt;a href=&#34;http://golang.org/doc/install/source&#34;&gt;http://golang.org/doc/install/source&lt;/a&gt; for the full set of supported combinations of target operating systems and compilation architectures.&lt;/p&gt;

&lt;h2 id=&#34;installing-hugo-binary:3cef5cab5612f8cc3d40c6e13331783b&#34;&gt;Installing Hugo (binary)&lt;/h2&gt;

&lt;p&gt;Installation is very easy. Simply download the appropriate version for your
platform from &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo Releases&lt;/a&gt;.
Once downloaded it can be run from anywhere. You don&amp;rsquo;t need to install
it into a global location. This works well for shared hosts and other systems
where you don&amp;rsquo;t have a privileged account.&lt;/p&gt;

&lt;p&gt;Ideally, you should install it somewhere in your &lt;code&gt;PATH&lt;/code&gt; for easy use.
&lt;code&gt;/usr/local/bin&lt;/code&gt; is the most probable location.&lt;/p&gt;

&lt;p&gt;On OS&amp;nbsp;X, if you have &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;, installation is even
easier: just run &lt;code&gt;brew install hugo&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;installing-pygments-optional:3cef5cab5612f8cc3d40c6e13331783b&#34;&gt;Installing Pygments (optional)&lt;/h3&gt;

&lt;p&gt;The Hugo executable has one &lt;em&gt;optional&lt;/em&gt; external dependency for source code highlighting (Pygments).&lt;/p&gt;

&lt;p&gt;If you want to have source code highlighting using the &lt;a href=&#34;http://localhost:1313/extras/highlighting/&#34;&gt;highlight shortcode&lt;/a&gt;,
you need to install the Python-based Pygments program. The procedure is outlined on the &lt;a href=&#34;http://pygments.org/&#34;&gt;Pygments home page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;upgrading-hugo:3cef5cab5612f8cc3d40c6e13331783b&#34;&gt;Upgrading Hugo&lt;/h2&gt;

&lt;p&gt;Upgrading Hugo is as easy as downloading and replacing the executable you’ve
placed in your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;installing-from-source:3cef5cab5612f8cc3d40c6e13331783b&#34;&gt;Installing from source&lt;/h2&gt;

&lt;h3 id=&#34;prerequisite-tools-for-downloading-and-building-source-code:3cef5cab5612f8cc3d40c6e13331783b&#34;&gt;Prerequisite tools for downloading and building source code&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mercurial.selenic.com/&#34;&gt;Mercurial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt; 1.3+ (Go 1.4+ on Windows, see Go &lt;a href=&#34;https://code.google.com/p/go/issues/detail?id=8090&#34;&gt;Issue #8090&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;get-directly-from-github:3cef5cab5612f8cc3d40c6e13331783b&#34;&gt;Get directly from GitHub&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ export GOPATH=$HOME/go
$ go get -v github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;go get&lt;/code&gt; will then fetch Hugo and all its dependent libraries to your
&lt;code&gt;$GOPATH/src&lt;/code&gt; directory, and compile everything into the final &lt;code&gt;hugo&lt;/code&gt;
(or &lt;code&gt;hugo.exe&lt;/code&gt;) executable, which you will find sitting in the
&lt;code&gt;$GOPATH/bin/&lt;/code&gt; directory, all ready to go!&lt;/p&gt;

&lt;p&gt;You may run &lt;code&gt;go get&lt;/code&gt; with the &lt;code&gt;-u&lt;/code&gt; option to update Hugo&amp;rsquo;s dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go get -u -v github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;contributing:3cef5cab5612f8cc3d40c6e13331783b&#34;&gt;Contributing&lt;/h2&gt;

&lt;p&gt;Please see the &lt;a href=&#34;http://localhost:1313/doc/contributing/&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Hugo</title>
      <link>http://localhost:1313/overview/usage/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/overview/usage/</guid>
      <description>

&lt;p&gt;Make sure either &lt;code&gt;hugo&lt;/code&gt; is in your &lt;code&gt;PATH&lt;/code&gt; or provide a path to it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;hljs nohighlight&#34;&gt;$ hugo help

Hugo is a Fast and Flexible Static Site Generator built with love by spf13 and friends in Go.

Complete documentation is available at http://gohugo.io

Usage:
  hugo [flags]
  hugo [command]

Available Commands:
  server          Hugo runs its own webserver to render the files
  version         Print the version number of Hugo
  config          Print the site configuration
  check           Check content in the source directory
  benchmark       Benchmark hugo by building a site a number of times
  new             Create new content for your site
  undraft         Undraft changes the content&#39;s draft status from &#39;True&#39; to &#39;False&#39;
  genautocomplete Generate shell autocompletion script for Hugo
  gendoc          Generate Markdown documentation for the Hugo CLI.
  help            Help about any command

Flags:
  -b, --baseURL=&#34;&#34;: hostname (and path) to the root, e.g. http://spf13.com/
  -D, --buildDrafts=false: include content marked as draft
  -F, --buildFuture=false: include content with publishdate in the future
      --cacheDir=&#34;&#34;: filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/
      --config=&#34;&#34;: config file (default is path/config.yaml|json|toml)
  -d, --destination=&#34;&#34;: filesystem path to write files to
      --disableRSS=false: Do not build RSS files
      --disableSitemap=false: Do not build Sitemap file
      --editor=&#34;&#34;: edit new content with this editor, if provided
  -h, --help=false: help for hugo
      --ignoreCache=false: Ignores the cache directory for reading but still writes to it
      --log=false: Enable Logging
      --logFile=&#34;&#34;: Log File path (if set, logging enabled automatically)
      --noTimes=false: Don&#39;t sync modification time of files
      --pluralizeListTitles=true: Pluralize titles in lists using inflect
  -s, --source=&#34;&#34;: filesystem path to read files relative from
      --stepAnalysis=false: display memory and timing of different steps of the program
  -t, --theme=&#34;&#34;: theme to use (located in /themes/THEMENAME/)
      --uglyURLs=false: if true, use /filename.html instead of /filename/
  -v, --verbose=false: verbose output
      --verboseLog=false: verbose logging
  -w, --watch=false: watch filesystem for changes and recreate as needed


Additional help topics:
 hugo convert         Convert will modify your content to different formats hugo list            Listing out various types of content

Use &#34;hugo help [command]&#34; for more information about a command.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;common-usage-example:dc32fe45042973266ca60588597e0b66&#34;&gt;Common Usage Example&lt;/h2&gt;

&lt;p&gt;The most common use is probably to run &lt;code&gt;hugo&lt;/code&gt; with your current directory being the input directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo
0 draft content
0 future content
99 pages created
0 paginator pages created
16 tags created
0 groups created
in 120 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This generates your web site to the &lt;code&gt;public/&lt;/code&gt; directory,
ready to be deployed to your web server.&lt;/p&gt;

&lt;h2 id=&#34;instant-feedback-as-you-develop-your-web-site:dc32fe45042973266ca60588597e0b66&#34;&gt;Instant feedback as you develop your web site&lt;/h2&gt;

&lt;p&gt;If you are working on things and want to see the changes immediately, tell Hugo to watch for changes.
Hugo will watch the filesystem for changes, and rebuild your site as soon as a file is saved:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo -s ~/Code/hugo/docs --watch
0 draft content
0 future content
99 pages created
0 paginator pages created
16 tags created
0 groups created
in 120 ms
Watching for changes in /Users/spf13/Code/hugo/docs/content
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugo can even run a server and create a site preview at the same time!
Hugo implements &lt;a href=&#34;http://localhost:1313/extras/livereload/&#34;&gt;LiveReload&lt;/a&gt; technology to automatically
reload any open pages in all JavaScript-enabled browsers, including mobile.
This is the easiest and most common way to develop a Hugo web site:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server -ws ~/Code/hugo/docs
0 draft content
0 future content
99 pages created
0 paginator pages created
16 tags created
0 groups created
in 120 ms
Watching for changes in /Users/spf13/Code/hugo/docs/content
Serving pages from /Users/spf13/Code/hugo/docs/public
Web Server is available at http://localhost:1313/
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;deploying-your-web-site:dc32fe45042973266ca60588597e0b66&#34;&gt;Deploying your web site&lt;/h2&gt;

&lt;p&gt;After running &lt;code&gt;hugo server&lt;/code&gt; for local web development,
you need to do a final &lt;code&gt;hugo&lt;/code&gt; run &lt;strong&gt;without the &lt;code&gt;server&lt;/code&gt; command&lt;/strong&gt;
and &lt;strong&gt;without &lt;code&gt;--watch&lt;/code&gt; or &lt;code&gt;-w&lt;/code&gt;&lt;/strong&gt; to rebuild your site.
You may then &lt;strong&gt;deploy your site&lt;/strong&gt; by copying the &lt;code&gt;public/&lt;/code&gt; directory
(by FTP, SFTP, WebDAV, Rsync, git push, etc.) to your production web server.&lt;/p&gt;

&lt;p&gt;Since Hugo generates a static website, your site can be hosted anywhere,
including &lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt;, &lt;a href=&#34;https://www.godaddy.com/&#34;&gt;GoDaddy&lt;/a&gt;, &lt;a href=&#34;http://www.dreamhost.com/&#34;&gt;DreamHost&lt;/a&gt;, &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;,
&lt;a href=&#34;http://aws.amazon.com/s3/&#34;&gt;Amazon S3&lt;/a&gt; and &lt;a href=&#34;http://aws.amazon.com/cloudfront/&#34; title=&#34;Amazon CloudFront&#34;&gt;CloudFront&lt;/a&gt;, or any other cheap or even free
static web hosting services.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://httpd.apache.org/&#34; title=&#34;Apache HTTP Server&#34;&gt;Apache&lt;/a&gt;, &lt;a href=&#34;http://nginx.org/&#34;&gt;nginx&lt;/a&gt;, &lt;a href=&#34;http://www.iis.net/&#34;&gt;IIS&lt;/a&gt;&amp;hellip;  Any web server software would do!&lt;/p&gt;

&lt;h3 id=&#34;a-note-about-deployment:dc32fe45042973266ca60588597e0b66&#34;&gt;A note about deployment&lt;/h3&gt;

&lt;p&gt;Running &lt;code&gt;hugo&lt;/code&gt; &lt;em&gt;does not&lt;/em&gt; remove generated files before building. This means that you should delete your &lt;code&gt;public/&lt;/code&gt; directory (or the directory you specified with &lt;code&gt;-d&lt;/code&gt;/&lt;code&gt;--destination&lt;/code&gt;) before running the &lt;code&gt;hugo&lt;/code&gt; command, or you run the risk of the wrong files (e.g. drafts and/or future posts) being left in the generated site.&lt;/p&gt;

&lt;p&gt;An easy way to work around this is to use different directories for development and production.&lt;/p&gt;

&lt;p&gt;To start a server that builds draft content (helpful for editing), you can specify a different destination: the &lt;code&gt;dev/&lt;/code&gt; dir.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server -wDs ~/Code/hugo/docs -d dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the content is ready for publishing, use the default &lt;code&gt;public/&lt;/code&gt; dir:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo -s ~/Code/hugo/docs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This prevents content you&amp;rsquo;re not ready to share yet from accidentally becoming available.&lt;/p&gt;

&lt;h3 id=&#34;alternatively-serve-your-web-site-with-hugo:dc32fe45042973266ca60588597e0b66&#34;&gt;Alternatively, serve your web site with Hugo!&lt;/h3&gt;

&lt;p&gt;Yes, that&amp;rsquo;s right!  Because Hugo is so blazingly fast both in web site creation
&lt;em&gt;and&lt;/em&gt; in web serving (thanks to its concurrent and multi-threaded design and
its Go heritage), some users actually prefer using Hugo itself to serve their
web site &lt;em&gt;on their production server&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;No other web server software (Apache, nginx, IIS&amp;hellip;) is necessary.&lt;/p&gt;

&lt;p&gt;Here is the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server --watch \
            --baseURL=http://yoursite.org/ --port=80 \
            --appendPort=false \
            --bind=87.245.198.50
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the &lt;code&gt;bind&lt;/code&gt; option, which is the interface to which the server will bind (defaults to &lt;code&gt;127.0.0.1&lt;/code&gt;, which is fine for most development use cases). Some hosts, like Amazon WS, runs network address translation and it can sometimes be hard to figure out the actual IP address. Using &lt;code&gt;--bind=0.0.0.0&lt;/code&gt; will bind to all interfaces.&lt;/p&gt;

&lt;p&gt;This way, you may actually deploy just the source files,
and Hugo on your server will generate the resulting web site
on-the-fly and serve them at the same time.&lt;/p&gt;

&lt;p&gt;You may optionally add &lt;code&gt;--disableLiveReload=true&lt;/code&gt; if you do not want
the JavaScript code for LiveReload to be added to your web pages.&lt;/p&gt;

&lt;p&gt;Interested? Here are some great tutorials contributed by Hugo users:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fredix.ovh/2014/10/hugo-syncthing/&#34;&gt;hugo, syncthing&lt;/a&gt; (French) by Frédéric Logier (@fredix)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hucsmn.com/post/hugo-tutorial-make-it-work/&#34;&gt;服务器上 hugo 的安装和配置 &lt;small&gt;(Installing and configuring Hugo on the server)&lt;/small&gt;&lt;/a&gt; (Chinese) by hucsmn&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Configuring Hugo</title>
      <link>http://localhost:1313/overview/configuration/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/overview/configuration/</guid>
      <description>

&lt;p&gt;The directory structure and templates provide the majority of the
configuration for a site. In fact, a config file isn&amp;rsquo;t even needed for many
websites since the defaults follow commonly used patterns.&lt;/p&gt;

&lt;p&gt;Hugo expects to find the config file in the root of the source directory and
will look there first for a &lt;code&gt;config.toml&lt;/code&gt; file. If none is present, it will
then look for a &lt;code&gt;config.yaml&lt;/code&gt; file, followed by a &lt;code&gt;config.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;The config file is a site-wide config. The config file provides directions to
hugo on how to build the site as well as site-wide parameters and menus.&lt;/p&gt;

&lt;h2 id=&#34;examples:a66b35d20295cb764719ac8bd35837ec&#34;&gt;Examples&lt;/h2&gt;

&lt;p&gt;The following is an example of a typical yaml config file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
baseurl: &amp;quot;http://yoursite.example.com/&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following is an example of a toml config file with some of the default values.
Values under &lt;code&gt;[params]&lt;/code&gt; will populate the &lt;code&gt;.Site.Params&lt;/code&gt; variable for use in templates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;contentdir = &amp;quot;content&amp;quot;
layoutdir = &amp;quot;layouts&amp;quot;
publishdir = &amp;quot;public&amp;quot;
builddrafts = false
baseurl = &amp;quot;http://yoursite.example.com/&amp;quot;
canonifyurls = true

[taxonomies]
  category = &amp;quot;categories&amp;quot;
  tag = &amp;quot;tags&amp;quot;

[params]
  description = &amp;quot;Tesla&#39;s Awesome Hugo Site&amp;quot;
  author = &amp;quot;Nikola Tesla&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a yaml configuration file which sets a few more options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
baseurl: &amp;quot;http://yoursite.example.com/&amp;quot;
title: &amp;quot;Yoyodyne Widget Blogging&amp;quot;
footnotereturnlinkcontents: &amp;quot;↩&amp;quot;
permalinks:
  post: /:year/:month/:title/
params:
  Subtitle: &amp;quot;Spinning the cogs in the widgets&amp;quot;
  AuthorName: &amp;quot;John Doe&amp;quot;
  GitHubUser: &amp;quot;spf13&amp;quot;
  ListOfFoo:
    - &amp;quot;foo1&amp;quot;
    - &amp;quot;foo2&amp;quot;
  SidebarRecentLimit: 5
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuration-variables:a66b35d20295cb764719ac8bd35837ec&#34;&gt;Configuration variables&lt;/h2&gt;

&lt;p&gt;Following is a list of Hugo-defined variables that you can configure and their current default values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
archetypedir:               &amp;quot;archetype&amp;quot;
# hostname (and path) to the root, e.g. http://spf13.com/
baseURL:                    &amp;quot;&amp;quot;
# include content marked as draft
buildDrafts:                false
# include content with publishdate in the future
buildFuture:                false
# enable this to make all relative URLs relative to content root. Note that this does not affect absolute URLs.
relativeURLs:               false
canonifyURLs:               false
# config file (default is path/config.yaml|json|toml)
config:                     &amp;quot;config.toml&amp;quot;
contentdir:                 &amp;quot;content&amp;quot;
dataDir:                    &amp;quot;data&amp;quot;
defaultExtension:           &amp;quot;html&amp;quot;
defaultLayout:              &amp;quot;post&amp;quot;
# filesystem path to write files to
destination:                &amp;quot;&amp;quot;
disableLiveReload:          false
# Do not build RSS files
disableRSS:                 false
# Do not build Sitemap file
disableSitemap:             false
# edit new content with this editor, if provided
editor:                     &amp;quot;&amp;quot;
footnoteAnchorPrefix:       &amp;quot;&amp;quot;
footnoteReturnLinkContents: &amp;quot;&amp;quot;
languageCode:               &amp;quot;&amp;quot;
layoutdir:                  &amp;quot;layouts&amp;quot;
# Enable Logging
log:                        false
# Log File path (if set, logging enabled automatically)
logFile:                    &amp;quot;&amp;quot;
# &amp;quot;yaml&amp;quot;, &amp;quot;toml&amp;quot;, &amp;quot;json&amp;quot;
metaDataFormat:             &amp;quot;toml&amp;quot;
newContentEditor:           &amp;quot;&amp;quot;
# Don&#39;t sync modification time of files
noTimes:                    false
paginate:                   10
paginatePath:               &amp;quot;page&amp;quot;
permalinks:
# Pluralize titles in lists using inflect
pluralizeListTitles:         true
publishdir:                 &amp;quot;public&amp;quot;
# color-codes for highlighting derived from this style
pygmentsStyle:              &amp;quot;monokai&amp;quot;
# true: use pygments-css or false: color-codes directly
pygmentsUseClasses:         false
# default sitemap configuration map
sitemap:
# filesystem path to read files relative from
source:                     &amp;quot;&amp;quot;
staticdir:                  &amp;quot;static&amp;quot;
# display memory and timing of different steps of the program
stepAnalysis:               false
# theme to use (located in /themes/THEMENAME/)
theme:                      &amp;quot;&amp;quot;
title:                      &amp;quot;&amp;quot;
# if true, use /filename.html instead of /filename/
uglyURLs:                   false
# Do not make the url/path to lowercase
disablePathToLower:         false
# if true, auto-detect Chinese/Janapese/Korean Languages in the content. (.Summary and .WordCount can work properly in CJKLanguage)
hasCJKLanguage              false
# verbose output
verbose:                    false
# verbose logging
verboseLog:                 false
# watch filesystem for changes and recreate as needed
watch:                      false
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ignore-files-on-build:a66b35d20295cb764719ac8bd35837ec&#34;&gt;Ignore files on build&lt;/h2&gt;

&lt;p&gt;The following inside &lt;code&gt;config.toml&lt;/code&gt; will ignore files ending with &lt;code&gt;.foo&lt;/code&gt; and &lt;code&gt;.boo&lt;/code&gt; when building with &lt;code&gt;hugo&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ignoreFiles = [ &amp;quot;\\.foo$&amp;quot;, &amp;quot;\\.boo$&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above is a list of Regular Expressions, but note the escaping of the &lt;code&gt;\&lt;/code&gt; to make TOML happy.&lt;/p&gt;

&lt;h2 id=&#34;configure-blackfriday-rendering:a66b35d20295cb764719ac8bd35837ec&#34;&gt;Configure Blackfriday rendering&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/russross/blackfriday&#34;&gt;Blackfriday&lt;/a&gt; is the &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt; rendering engine used in Hugo. The Blackfriday configuration in Hugo is mostly a set of sane defaults that should fit most use cases.&lt;/p&gt;

&lt;p&gt;But Hugo does expose some options&amp;mdash;as listed in the table below, matched with the corresponding flag in the Blackfriday source (&lt;a href=&#34;https://github.com/russross/blackfriday/blob/master/html.go&#34;&gt;html.go&lt;/a&gt; and &lt;a href=&#34;https://github.com/russross/blackfriday/blob/master/markdown.go&#34;&gt;markdown.go&lt;/a&gt;):&lt;/p&gt;

&lt;table class=&#34;table table-bordered&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag&lt;/th&gt;&lt;th&gt;Default&lt;/th&gt;&lt;th&gt;Blackfriday flag&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;smartypants&lt;/strong&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;HTML_USE_SMARTYPANTS&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;purpose-title&#34;&gt;Purpose:&lt;/td&gt;
&lt;td class=&#34;purpose-description&#34; colspan=&#34;2&#34;&gt;Enable/Disable smart punctuation substitutions such as smart quotes, smart dashes, etc.
May be fine-tuned with the &lt;code&gt;angledQuotes&lt;/code&gt;, &lt;code&gt;fractions&lt;/code&gt;, &lt;code&gt;smartDashes&lt;/code&gt; and &lt;code&gt;latexDashes&lt;/code&gt; flags below.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;angledQuotes&lt;/strong&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;HTML_SMARTYPANTS_ANGLED_QUOTES&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;purpose-title&#34;&gt;Purpose:&lt;/td&gt;
&lt;td class=&#34;purpose-description&#34; colspan=&#34;2&#34;&gt;Enable/Disable smart angled double quotes.&lt;br&gt;
&lt;small&gt;&lt;strong&gt;Example:&lt;/strong&gt;&amp;nbsp;&lt;code&gt;&#34;Hugo&#34;&lt;/code&gt; renders to «Hugo» instead of “Hugo”.&lt;/small&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;fractions&lt;/strong&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;HTML_SMARTYPANTS_FRACTIONS&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;purpose-title&#34;&gt;Purpose:&lt;/td&gt;
&lt;td class=&#34;purpose-description&#34; colspan=&#34;2&#34;&gt;Enable/Disable smart fractions.&lt;br&gt;
&lt;small&gt;&lt;strong&gt;Example:&lt;/strong&gt;&amp;nbsp;&lt;code&gt;5/12&lt;/code&gt; renders to &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt; (&lt;code&gt;&amp;lt;sup&amp;gt;5&amp;lt;/sup&amp;gt;&amp;amp;frasl;&amp;lt;sub&amp;gt;12&amp;lt;/sub&amp;gt;&lt;/code&gt;)&lt;br&gt;
&lt;strong&gt;Caveat:&lt;/strong&gt; Even with &lt;code&gt;fractions = false&lt;/code&gt;,
Blackfriday would still convert 1/2, 1/4 and 3/4 to ½&amp;nbsp;(&lt;code&gt;&amp;amp;frac12;&lt;/code&gt;),
¼&amp;nbsp;(&lt;code&gt;&amp;amp;frac14;&lt;/code&gt;) and ¾&amp;nbsp;(&lt;code&gt;&amp;amp;frac34;&lt;/code&gt;) respectively,
but only these three.&lt;/small&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;smartDashes&lt;/strong&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;HTML_SMARTYPANTS_DASHES&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;purpose-title&#34;&gt;Purpose:&lt;/td&gt;
&lt;td class=&#34;purpose-description&#34; colspan=&#34;2&#34;&gt;Enable/Disable smart dashes, i.e. turning hyphens into en&amp;nbsp;dash or em&amp;nbsp;dash.&lt;br&gt;
Its behavior can be modified with the &lt;code&gt;latexDashes&lt;/code&gt; flag listed below.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;latexDashes&lt;/strong&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;HTML_SMARTYPANTS_LATEX_DASHES&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;purpose-title&#34;&gt;Purpose:&lt;/td&gt;
&lt;td class=&#34;purpose-description&#34; colspan=&#34;2&#34;&gt;Choose between LaTeX-style smart dashes and “conventional” smart dashes.&lt;br&gt;
&lt;strong&gt;If &lt;code&gt;true&lt;/code&gt;,&lt;/strong&gt; &lt;code&gt;--&lt;/code&gt; is translated into “&amp;ndash;” (&lt;code&gt;&amp;amp;ndash;&lt;/code&gt;), and &lt;code&gt;---&lt;/code&gt; is translated into “&amp;mdash;” (&lt;code&gt;&amp;amp;mdash;&lt;/code&gt;).&lt;br&gt;
&lt;strong&gt;If &lt;code&gt;false&lt;/code&gt;,&lt;/strong&gt; &lt;code&gt;--&lt;/code&gt; is translated into “&amp;mdash;” (&lt;code&gt;&amp;amp;mdash;&lt;/code&gt;), whereas a &lt;em&gt;spaced&lt;/em&gt; single hyphen between two words is turned into an en&amp;nbsp;dash, e.g.&amp;nbsp;&lt;code&gt;12 June - 3 July&lt;/code&gt; becomes &lt;code&gt;12 June &amp;amp;ndash; 3 July&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr style=&#34;height: 0.5em;&#34;&gt;&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;hrefTargetBlank&lt;/strong&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;HTML_HREF_TARGET_BLANK&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;purpose-title&#34;&gt;Purpose:&lt;/td&gt;
&lt;td class=&#34;purpose-description&#34; colspan=&#34;2&#34;&gt;Open external links in a new window/tab.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;plainIdAnchors&lt;/strong&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;FootnoteAnchorPrefix&lt;/code&gt; and &lt;code&gt;HeaderIDSuffix&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;purpose-title&#34;&gt;Purpose:&lt;/td&gt;
&lt;td class=&#34;purpose-description&#34; colspan=&#34;2&#34;&gt;If &lt;code&gt;true&lt;/code&gt;, then header and footnote IDs are generated without the document ID.&lt;br&gt;
&lt;small&gt;&lt;strong&gt;Example:&lt;/strong&gt;&amp;nbsp;&lt;code&gt;#my-header&lt;/code&gt; instead of &lt;code&gt;#my-header:bec3ed8ba720b9073ab75abcf3ba5d97&lt;/code&gt;.&lt;/small&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr style=&#34;height: 0.5em;&#34;&gt;&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;extensions&lt;/strong&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;EXTENSION_*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;purpose-title&#34;&gt;Purpose:&lt;/td&gt;
&lt;td class=&#34;purpose-description&#34; colspan=&#34;2&#34;&gt;Use non-default additional extensions.&lt;br&gt;
&lt;small&gt;&lt;strong&gt;Example:&lt;/strong&gt;&amp;nbsp;Add &lt;code&gt;&#34;hardLineBreak&#34;&lt;/code&gt; to use &lt;code&gt;EXTENSION_HARD_LINE_BREAK&lt;/code&gt;.&lt;/small&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;extensionsmask&lt;/strong&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;EXTENSION_*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;purpose-title&#34;&gt;Purpose:&lt;/td&gt;
&lt;td class=&#34;purpose-description&#34; colspan=&#34;2&#34;&gt;Extensions in this option won&#39;t be loaded.&lt;br&gt;
&lt;small&gt;&lt;strong&gt;Example:&lt;/strong&gt;&amp;nbsp;Add &lt;code&gt;&#34;autoHeaderIds&#34;&lt;/code&gt; to disable &lt;code&gt;EXTENSION_AUTO_HEADER_IDS&lt;/code&gt;.&lt;/small&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that these flags must be grouped under the &lt;code&gt;blackfriday&lt;/code&gt; key and can be set on &lt;strong&gt;both site and page level&lt;/strong&gt;. If set on page, it will override the site setting.  Example:&lt;/p&gt;

&lt;table class=&#34;table&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;TOML&lt;/th&gt;&lt;th&gt;YAML&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr style=&#34;vertical-align: top;&#34;&gt;
&lt;td style=&#34;width: 50%;&#34;&gt;&lt;pre&gt;&lt;code&gt;[blackfriday]
  angledQuotes = true
  fractions = false
  plainIdAnchors = true
  extensions = [&#34;hardLineBreak&#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;&lt;pre&gt;&lt;code&gt;blackfriday:
  angledQuotes: true
  fractions: false
  plainIdAnchors: true
  extensions:
    - hardLineBreak
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;notes:a66b35d20295cb764719ac8bd35837ec&#34;&gt;Notes&lt;/h2&gt;

&lt;p&gt;Config changes are not reflected with &lt;a href=&#34;http://localhost:1313/extras/livereload/&#34;&gt;LiveReload&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please restart &lt;code&gt;hugo server --watch&lt;/code&gt; whenever you make a config change.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Source Organization</title>
      <link>http://localhost:1313/overview/source-directory/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/overview/source-directory/</guid>
      <description>

&lt;p&gt;Hugo takes a single directory and uses it as the input for creating a complete
website.&lt;/p&gt;

&lt;p&gt;The top level of a source directory will typically have the following elements:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▸ archetypes/
▸ content/
▸ data/
▸ layouts/
▸ static/
▸ themes/
  config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Learn more about the different directories and what their purpose is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/overview/configuration/&#34;&gt;config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/extras/datafiles/&#34;&gt;data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/content/archetypes/&#34;&gt;archetypes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/content/organization/&#34;&gt;content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/layout/overview/&#34;&gt;layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/themes/creation#toc_4&#34;&gt;static&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/themes/overview/&#34;&gt;themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;example:eda897de2e1d9fdedc0a3929693cea10&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;An example directory may look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── config.toml
├── archetypes
|   └── default.md
├── content
|   ├── post
|   |   ├── firstpost.md
|   |   └── secondpost.md
|   └── quote
|   |   ├── first.md
|   |   └── second.md
├── data
├── layouts
|   ├── _default
|   |   ├── single.html
|   |   └── list.html
|   ├── partials
|   |   ├── header.html
|   |   └── footer.html
|   ├── taxonomies
|   |   ├── category.html
|   |   ├── post.html
|   |   ├── quote.html
|   |   └── tag.html
|   ├── post
|   |   ├── li.html
|   |   ├── single.html
|   |   └── summary.html
|   ├── quote
|   |   ├── li.html
|   |   ├── single.html
|   |   └── summary.html
|   ├── shortcodes
|   |   ├── img.html
|   |   ├── vimeo.html
|   |   └── youtube.html
|   ├── index.html
|   └── sitemap.xml
├── themes
|   ├── hyde
|   └── doc
└── static
    ├── css
    └── js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This directory structure tells us a lot about this site:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The website intends to have two different types of content: &lt;em&gt;posts&lt;/em&gt; and &lt;em&gt;quotes&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It will also apply two different taxonomies to that content: &lt;em&gt;categories&lt;/em&gt; and &lt;em&gt;tags&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It will be displaying content in 3 different views: a list, a summary and a full page view.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>